// Code generated by mockery v2.10.0. DO NOT EDIT.

package fake

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/olxbr/network-api/pkg/types"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// DeleteNetwork provides a mock function with given fields: ctx, id
func (_m *Database) DeleteNetwork(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePool provides a mock function with given fields: ctx, region
func (_m *Database) DeletePool(ctx context.Context, region string) error {
	ret := _m.Called(ctx, region)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, region)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProvider provides a mock function with given fields: ctx, name
func (_m *Database) DeleteProvider(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNetwork provides a mock function with given fields: ctx, id
func (_m *Database) GetNetwork(ctx context.Context, id string) (*types.Network, error) {
	ret := _m.Called(ctx, id)

	var r0 *types.Network
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Network); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Network)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPool provides a mock function with given fields: ctx, region
func (_m *Database) GetPool(ctx context.Context, region string) (*types.Pool, error) {
	ret := _m.Called(ctx, region)

	var r0 *types.Pool
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Pool); ok {
		r0 = rf(ctx, region)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Pool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, region)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProvider provides a mock function with given fields: ctx, name
func (_m *Database) GetProvider(ctx context.Context, name string) (*types.Provider, error) {
	ret := _m.Called(ctx, name)

	var r0 *types.Provider
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Provider); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutNetwork provides a mock function with given fields: ctx, n
func (_m *Database) PutNetwork(ctx context.Context, n *types.Network) error {
	ret := _m.Called(ctx, n)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Network) error); ok {
		r0 = rf(ctx, n)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutPool provides a mock function with given fields: ctx, p
func (_m *Database) PutPool(ctx context.Context, p *types.Pool) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Pool) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PutProvider provides a mock function with given fields: ctx, p
func (_m *Database) PutProvider(ctx context.Context, p *types.Provider) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.Provider) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScanNetworks provides a mock function with given fields: ctx
func (_m *Database) ScanNetworks(ctx context.Context) ([]*types.Network, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Network
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Network); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Network)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanPools provides a mock function with given fields: ctx
func (_m *Database) ScanPools(ctx context.Context) ([]*types.Pool, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Pool
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Pool); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Pool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanProviders provides a mock function with given fields: ctx
func (_m *Database) ScanProviders(ctx context.Context) ([]*types.Provider, error) {
	ret := _m.Called(ctx)

	var r0 []*types.Provider
	if rf, ok := ret.Get(0).(func(context.Context) []*types.Provider); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Provider)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
